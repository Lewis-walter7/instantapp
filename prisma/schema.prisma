// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String? @unique
  email String? @unique
  bio String?
  gender String?
  hashedPassword String?
  emailVerified DateTime?
  profileImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conversationIds String[] @db.ObjectId
  hasNotification Boolean?
  followingIds String[] @db.ObjectId

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])  

  account Account[]
  posts Post[]
  messages Message[]
  comment Comment[]
  like Like[]
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  notifications Notification[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  postId String @db.ObjectId
  commentId String @db.ObjectId

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  likeIds String[] @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  like Like[]
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  url String
  caption String?
  likeids String[] @db.ObjectId
  userId String @db.ObjectId
  location String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  hideLikes Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  like Like[]
  comments Comment[]
}
 model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())
  senderId String @db.ObjectId

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
 }

 model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  createdAt DateTime @default(now())
  body String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 }

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  isGroup Boolean?
  name String?
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  messagesIds String[] @db.ObjectId
  userIds String[] @db.ObjectId

  messages Message[]
  users User[] @relation(fields: [userIds], references: [id])
}